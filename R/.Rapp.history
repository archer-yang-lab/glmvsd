library(vsd)#
# x<-matrix(rnorm(50*8),ncol=8)#
# y<-rnorm(50,0,1.5)#
# best <- sample(c(1,0),8,replace=T)#
library("MASS")#
#
n<-50#
d=p<-65#
#K<-10 #K-fold cv#
n.sim<-100 #number of repetition#
#m<-30 #size of subsample in sequential instability#
n.s<-100 #number of lambda in fitting lasso#
n.train<-30#
psi<-1#
#
beta<-c(3,1.5,0,0,2,0,0,0,10,5,5,2.5,2.5,1.25,1.25,0.675,0.675,0.3125,0.3125,rep(0,10),2*c(10,5,5,2.5,2.5,1.25,1.25,0.675,0.675,0.3125,0.3125),rep(0,10),rep(2.5,5),rep(1.5,5),rep(0.5,5))#
b0<-c(1-as.numeric(beta==0))#
#
# AR(1), rho=0.5#
#
sigma<-matrix(0,d,d)#
#
 for(i in 1:d)#
 {#
    for(j in 1:d)#
      {#
       sigma[i,j]<-0.5^abs(i-j)#
      }#
 }#
set.seed(1000+i)#
x<-mvrnorm(n,rep(0,d),sigma)#
e<-rnorm(n,0,0.01)#
y<-drop(x%*%beta+e)#
best <- sample(c(1,0),65,replace=T)#
#
# fit<-vsd(x,y,n.train=40,n.sim=50,candidate="union",weight.function="ARM.Prior", best=best)#
# #
y <- drop(y)#
x <- as.matrix(x)#
p<-NCOL(x)#
n<-length(y)#
lassofit<-glmnet(x=x,y=y,alpha=1,maxit=100000000)#
scadfit<-ncvreg(X=x,y=y,family="gaussian",penalty="SCAD",max.iter=10000000)#
mcpfit<-ncvreg(X=x,y=y,family="gaussian",penalty="MCP",max.iter=10000000)#
  lasso.path<- as.matrix(lassofit$beta)#
  scad.path<- as.matrix(scadfit$beta[-1,])#
  mcp.path<- as.matrix(mcpfit$beta[-1,])#
#
  beta.path<-t(cbind(lasso.path,scad.path,mcp.path))#
  ind.path<-(1-(beta.path==0))#
#
  candidate_model <- unique(ind.path)#
  rownames(candidate_model) <- NULL#
candidate_model = ind.path#
n_rep=100#
n_train=ceiling(n/2)#
psi=1
y <- drop(y)#
	x <- as.matrix(x)#
	p<-NCOL(x)#
	n<-length(y)#
#
	if (n != NROW(x)) #
	    stop("x and y have different number of observations")#
	if (n_train >= n) #
	    stop("Training size must be less than the number of observations")#
#
	   if(missing(candidate_model)) stop("Users must supply a candidate model.")#
	   if(is.matrix(candidate_model)!=TRUE) stop("Supplied model must be a matrix.")#
	   if(NCOL(candidate_model)!=NCOL(x)) stop("Number of variables in candidate model and x does not match.")#
cand.nonzero<-rowSums(candidate_model)#
o<-order(cand.nonzero)#
model.ordered<-candidate_model[o,]#
model<-model.ordered[rowSums(model.ordered)<n_train, ]#
nonzero<-rowSums(model)#
#
m <- NROW(model)#
d1<-matrix(NA, n_rep, m)#
s1<-matrix(NA, n_rep, m)
for (i in 1:n_rep){#
	train<-sample(n,n_train,replace=F)#
	# x.test<-x[-train,]#
	# y.test<-y[-train]#
	# x.train<-x[train,]#
	# y.train<-y[train]#
	if (any(model[1,]==1))#
    {#
			for (j in 1:m)#
			{#
	           LSL<-lm(y[train]~x[train, model[j,]==1])#
	           d1[i,j]<-sum((y[-train]-cbind(1,x[-train, model[j,]==1])%*%LSL$coef)^2)#
	           s1[i,j]<-summary(LSL)$sigma#
			}#
	}#
	else{#
			d1[i,1]<-sum((y[-train]-mean(y[train]))^2)#
	        s1[i,1]<-sd(y[train])#
		    for (j in 2:m)#
			{#
	           LSL<-lm(y[train]~x[train, model[j,]==1])#
	           d1[i,j]<-sum((y[-train]-cbind(1,x[-train, model[j,]==1])%*%LSL$coef)^2)#
	           s1[i,j]<-summary(LSL)$sigma#
			}#
        }#
}
i
j
any(model[1,]==1)
d1[i,1]<-sum((y[-train]-mean(y[train]))^2)
s1[i,1]<-sd(y[train])
model[j,]
candidate
candidate_model
dim(candidate_model)
model.ordered
model
dim(model)
m1[1,]
model[1,]
model[2,]
a = matrix(c(1,1,1,0,1,1,1,1,1,1,1),4,3)
a = matrix(c(1,1,1,0,1,1,1,1,1,1,1),4,2)
a = matrix(c(1,1,1,0,1,1,1,1,1,1,1))
a = matrix(c(1,1,1,0,1,1,1,0,1,1,1,1))
a = matrix(c(1,1,1,0,1,1,1,0,1,1,1,1),4,3)
z
a = t(a)
a
unique(a)
lasso.path<- as.matrix(lassofit$beta)#
  scad.path<- as.matrix(scadfit$beta[-1,])#
  mcp.path<- as.matrix(mcpfit$beta[-1,])#
#
  beta.path<-t(cbind(lasso.path,scad.path,mcp.path))#
  ind.path<-(1-(beta.path==0))
ind.path
rowSums(ind.path)
setwd('/Users/emeryyi/Dropbox/Research/13_glmvsd')
candidate_model <- unique(ind.path)
rowSums(candidate_model)
cand.nonzero<-rowSums(candidate_model)
cand.nonzero
o<-order(cand.nonzero)
model.ordered<-candidate_model[o,]
model<-model.ordered[rowSums(model.ordered)<n_train, ]
nonzero<-rowSums(model)
setwd('/Users/emeryyi/Dropbox/Research/googleproject/glmvsd/R')
nonzero
