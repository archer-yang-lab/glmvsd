library(vsd)#
# x<-matrix(rnorm(50*8),ncol=8)#
# y<-rnorm(50,0,1.5)#
# best <- sample(c(1,0),8,replace=T)#
library("MASS")#
#
n<-50#
d=p<-65#
#K<-10 #K-fold cv#
n.sim<-100 #number of repetition#
#m<-30 #size of subsample in sequential instability#
n.s<-100 #number of lambda in fitting lasso#
n.train<-30#
psi<-1#
#
beta<-c(3,1.5,0,0,2,0,0,0,10,5,5,2.5,2.5,1.25,1.25,0.675,0.675,0.3125,0.3125,rep(0,10),2*c(10,5,5,2.5,2.5,1.25,1.25,0.675,0.675,0.3125,0.3125),rep(0,10),rep(2.5,5),rep(1.5,5),rep(0.5,5))#
b0<-c(1-as.numeric(beta==0))#
#
# AR(1), rho=0.5#
#
sigma<-matrix(0,d,d)#
#
 for(i in 1:d)#
 {#
    for(j in 1:d)#
      {#
       sigma[i,j]<-0.5^abs(i-j)#
      }#
 }#
set.seed(1000+i)#
x<-mvrnorm(n,rep(0,d),sigma)#
e<-rnorm(n,0,0.01)#
y<-drop(x%*%beta+e)#
best <- sample(c(1,0),65,replace=T)#
#
# fit<-vsd(x,y,n.train=40,n.sim=50,candidate="union",weight.function="ARM.Prior", best=best)#
# #
lassofit<-glmnet(x=x,y=y,alpha=1,maxit=100000000)#
scadfit<-ncvreg(X=x,y=y,family="gaussian",penalty="SCAD",max.iter=10000000)#
mcpfit<-ncvreg(X=x,y=y,family="gaussian",penalty="MCP",max.iter=10000000)#
  lasso.path<- as.matrix(lassofit$beta)#
  scad.path<- as.matrix(scadfit$beta[-1,])#
  mcp.path<- as.matrix(mcpfit$beta[-1,])#
#
  beta.path<-t(cbind(lasso.path,scad.path,mcp.path))#
  ind.path<-(1-(beta.path==0))#
candidate_model = ind.path
setwd('/Users/emeryyi/Dropbox/Research/13_glmvsd')
y <- drop(y)#
x <- as.matrix(x)#
p<-NCOL(x)#
n<-length(y)#
lassofit<-glmnet(x=x,y=y,alpha=1,maxit=100000000)#
scadfit<-ncvreg(X=x,y=y,family="gaussian",penalty="SCAD",max.iter=10000000)#
mcpfit<-ncvreg(X=x,y=y,family="gaussian",penalty="MCP",max.iter=10000000)#
  lasso.path<- as.matrix(lassofit$beta)#
  scad.path<- as.matrix(scadfit$beta[-1,])#
  mcp.path<- as.matrix(mcpfit$beta[-1,])#
#
  beta.path<-t(cbind(lasso.path,scad.path,mcp.path))#
  ind.path<-(1-(beta.path==0))#
candidate_model = ind.path#
n_rep=100#
n_train=ceiling(n/2)#
psi=1
cand.nonzero<-rowSums(candidate_model)#
o<-order(cand.nonzero)#
model.ordered<-candidate_model[o,]#
model<-model.ordered[rowSums(model.ordered)<n_train, ]#
nonzero<-rowSums(model)#
#
m <- NROW(model)#
one<- rep(1,n-n_train)#
D1<-matrix(NA, n_rep, m)#
s1<-matrix(NA, n_rep, m)
i=1
j=10
train<-sample(n,n_train,replace=F)#
	x.test<-x[-train,]#
	y.test<-y[-train]#
	x.train<-x[train,]#
	y.train<-y[train]
model[j,]==1
model
model[j,]
which(model[j,]==1)
j = 50
mi.train <- x.train[, which(model[j,]==1)]
mi.train
mi.train <- x.train[, model[j,]==1]
x.train
mi.train <- x.train[, which(model[j,]==1)] #
mi.train1 <- x.train[, model[j,]==1]
mi.train-mi.train1
mi.train <- x.train[, model[j,]==1] #
mi.test <- x.test[, model[j,]==1]
LSL<-lm(y.train~mi.train)
coef.train<-LSL$coef
mi.train <- x.train[, model[j,]==1] #
			mi.test <- x.test[, model[j,]==1] #
           LSL<-lm(y.train~mi.train)
mi.test
cbind(1,mi.test)
pred<-cbind(1,mi.test)%*%LSL$coef
pred
n
D1[i,j]<-sum((y.test-pred)^2)
j=1
x.test<-x[-train,]#
	y.test<-y[-train]#
	x.train<-x[train,]#
	y.train<-y[train]
LSL<-lm(y.train~1)
LSL$coef
D1[i,j]<-sum((y.test-LSL$coef)^2)
s1[i,j]<-summary(LSL)$sigma
warning()
warnings()
for (i in 1:n_rep){#
	train<-sample(n,n_train,replace=F)#
	x.test<-x[-train,]#
	y.test<-y[-train]#
	x.train<-x[train,]#
	y.train<-y[train]#
      for (j in 1:m)#
	  {#
        if (any(model[j,])==1)#
           {#
			mi.train <- x.train[, model[j,]==1] #
			mi.test <- x.test[, model[j,]==1] #
           LSL<-lm(y.train~mi.train)#
           pred<-cbind(1,mi.test)%*%LSL$coef#
           D1[i,j]<-sum((y.test-pred)^2)#
           s1[i,j]<-summary(LSL)$sigma#
		}#
		else{#
           LSL<-lm(y.train~1)#
           D1[i,j]<-sum((y.test-LSL$coef)^2)#
           s1[i,j]<-summary(LSL)$sigma#
          }#
	  }#
}
LSL<-lm(y.train~1)#
           D1[i,j]<-sum((y.test-LSL$coef)^2)#
           s1[i,j]<-summary(LSL)$sigma
setwd('/Users/emeryyi/Dropbox/Research/googleproject/glmvsd/R')
mi.train <- x.train[, model[j,]==1] #
			mi.test <- x.test[, model[j,]==1] #
           LSL<-lm(y.train~mi.train)#
           pred<-cbind(1,mi.test)%*%LSL$coef#
           D1[i,j]<-sum((y.test-pred)^2)#
           s1[i,j]<-summary(LSL)$sigma
n_rep
D1
s1
dim(model)
is.na()
?is.na()
?is.na
is.na(D2)
is.na(D1)
is.na(s1)
which(is.na(s1))
